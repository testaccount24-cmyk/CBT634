         TITLE 'UCBSUBR - SCAN ALL DASD UCBS FOR CACHE LIST.'           0001
         SPACE 1                                                        0003
*===================================================================*   0004
*                                                                   *   0005
*        SUBROUTINE TO BE CALLED FROM A REXX TO SCAN ALL UCBS OF A  *   0006
*   GIVEN DEVICE TYPE ( DASD, TAPE ) AND REPORT BACK WITH EACH      *   0007
*   UNIT'S UCB.  THE REXX IS THEN FREE TO DO WHATEVER IT WANTS WITH *   0008
*   THE INFORMATION, INCLUDING THE STORAGE FUNCTION TO ACCESS THE   *   0009
*   UCB EXTENSION AND OTHER INFORMATION IF NECESSARY.               *   0010
*                                                                   *   0013
*        ON RETURN, THE FIRST 2 BYTES OF THE RESULT INDICATE THE    *   0013
*   STATUS.  HEX 'FFFF' MEANS THAT THE SUPPLY OF THE PARTICULAR     *   0013
*   UCB'S IS EXHAUSTED.  HEX 'FFFE' MEANS THAT AN ERROR IN THE      *   0013
*   ARGUMENTS WAS DETECTED, AND AN EXPLANATION FOLLOWS.  ANYTHING   *   0013
*   ELSE IS THE START OF A NORMAL UCB.  THE LAST UCB MUST BE USED   *   0013
*   AS THE SECOND ARGUMENT ON SUBSEQUENT CALLS TO THIS ROUTINE SO   *   0013
*   THE PROPER CONTINUITY OF UCB'S MAY BE MAINTAINED.               *   0013
*                                                                   *   0013
*===================================================================*   0014
UCBSUBR  CSECT                                                          0015
         YREGS                                                          0016
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.             0017
         LR    R12,R15             COPY BASE.                           0018
         USING UCBSUBR,R12         (TELL ASSEMBLER).                    0019
         LR    R14,R13             PRESERVE CALLER'S SAVE AREA PTR.     0020
         LA    R13,SAVE            POINT TO MY SAVE AREA                0021
         ST    R13,8(,R14)         CHAIN ...                            0022
         ST    R14,SAVE+4          ... SAVE AREAS.                      0023
*                                                                       0024
         LR    R2,R0               ADDRESS OF ENVIRONMENT BLOCK         0025
         LR    R3,R1               ADDRESS OF EXTERNAL FUNCTION BLOCK   0026
         L     R4,16(,R3)          GET FIRST PARM'S ADDRESS POINTER     0026
         L     R5,0(,R4)           GET FIRST PARM'S ADDRESS             0026
         L     R6,4(,R4)           GET FIRST PARM'S LENGTH              0026
         C     R6,=X'00000005'     MAKE SURE WE ARE 4 BYTES OR LESS     0026
         BL    GOODARG             IF SO, WE MAY CONTINUE               0026
         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS       0026
         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS               0026
         CVD   R6,TEMPWORK         DECIMALIZE REGISTER 6                0026
         UNPK  BADMESS1(4),TEMPWORK(8)                                  0026
         OI    BADMESS1+3,X'F0'                                         0026
         TR    BADMESS1(4),TRTAB-240                                    0026
         MVC   16(L'BADMESS1+2,R4),BADMESS1-2 PUT MESSAGE IN RETURN     0026
         L     R5,LBADMS1          GET RETURN ARGUMENT LENGTH           0026
         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK                 0026
         LH    R15,=X'0004'        SET UP NON-ZERO RETURN CODE          0026
         B     BADOUT              RETURN IT                            0026
*                                                                       0027
GOODARG  EQU   *                                                        0027
         LA    R9,8(,R4)           GET SECOND ARG ADDRESS POINTER       0027
         L     R4,0(,R9)           GET SECOND ARG ADDRESS               0027
         MVC   TEMPUCB(L'TEMPUCB+L'SCANWORK),0(R4) RECOVER WORK AREA    0027
         BCT   R6,COMP1            DECREMENT FOR CLC                    0027
COMP1    EX    R6,CLC1             COMPARE FOR ALL ZEROES               0027
*                                                                       0027
* CLC1   CLC   0(*-*,R5),ZEROES                                         0027
*                                                                       0027
         LA    R6,1(,R6)           RESTORE ADDRESS                      0027
         BNZ   SEARCH              IF NOT FIRST PASS, DON'T INITIALIZE  0027
         XC    SCANWORK,SCANWORK   INDICATE WE'RE STARTING FRESH        0036
         LA    R9,8(,R9)           GET THIRD ADDRESS POINTER            0036
         L     R4,0(,R9)           GET THIRD ARG ADDRESS                0036
         L     R5,4(,R9)           GET THIRD ARG LENGTH                 0036
         C     R5,=X'00000002'     MAKE SURE WE ARE AT LEAST 3 BYTES    0036
         BH    LONGOK              IF SO, WE MAY CONTINUE               0036
         BCT   R5,MOVE1            DECREMEMT FOR INSTRUCTIONAL USE      0036
MOVE1    EX    R5,MVC1             ELSE PUT PARTIAL IN MESSAGE          0036
*                                                                       0036
* MVC1   MVC   BADMESS3(*-*),0(R4) EXECUTED INSTRUCTION                 0036
*                                                                       0036
         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS       0036
         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS               0036
         MVC   16(L'BADMESS3+2,R4),BADMESS3-2 PUT MESSAGE IN RETURN     0036
MVC2     MVC   8(4,R4),LBADMS3     EXECUTED INSTRUCTION                 0036
         LH    R15,=X'0004'        SET UP NON-ZERO RETURN CODE          0036
         B     BADOUT              RETURN IT                            0036
LONGOK   LA    R5,TYPES            POINT TO ALLOWED DEV TYPES           0036
         LH    R14,NTYPES          GET COUNT OF POSSIBILITIES           0036
NEXTRY   EQU   *                                                        0036
         CLC   0(4,R4),0(R5)       DO WE HAVE A MATCH                   0036
         BZ    TYPEFIND            IF SO WE'RE DONE                     0036
         LA    R5,5(,R5)           POINT TO NEXT ONE                    0036
         BCT   R14,NEXTRY          ELSE GO TRY AGAIN                    0036
         MVC   BADMESS2(4),0(R4)   PUT SOUGHT DEVICE IN MESSAGE         0036
         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS       0036
         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS               0036
         MVC   16(L'BADMESS2+2,R4),BADMESS2-2 PUT MESSAGE IN RETURN     0036
         L     R5,LBADMS2          GET RETURN ARG LENGTH                0036
         ST    R5,8(,R4)           PUT IT INTO EVAL BLOCK               0036
         LH    R15,=X'008'         SET UP BAD RETURN CODE               0036
         B     BADOUT              RETURN LIKE THAT                     0036
         DS    0H                                                       0036
TYPEFIND EQU   *                   *** SELF MODIFYING CODE ***          0036
         MVC   GOSCAN+X'A1'(1),4(R5) MOVE INDICATOR INTO POSITION       0036
SEARCH   EQU   *                                                        0036
         L     R4,20(,R3)          GET EVAL BLOCK POINTER ADDRESS       0037
         L     R4,0(,R4)           GET EVAL BLOCK ADDRESS               0037
         B     GOSCAN                                                   0037
         CNOP  0,8                 ALIGN FIRST                          0037
GOSCAN   EQU   *                                                        0037
         UCBSCAN COPY,WORKAREA=SCANWORK,DEVNCHAR=DEVNUM,               X0038
               DEVCLASS=DASD,DYNAMIC=YES,UCBAREA=TEMPUCB,RANGE=ALL      0039
         LTR   R15,R15             SEE IF WE GOT ONE                    0040
         BNZ   NOMORE                                                   0041
*        HERE WE HAVE A UCB POINTER TO PROCESS                          0042
         MVC   16(L'TEMPUCB+L'SCANWORK+4,R4),TEMPUCB MOVE UCB FOR RET   0045
         LA    R5,L'TEMPUCB+L'SCANWORK+4(0) RETURN ARGUMENT LENGTH      0045
         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK                 0045
         B     DONE                                                     0046
*                                                                       0065
NOMORE   EQU   *                                                        0066
         L     R5,UCBLEN           GET RETURN ARGUMENT LENGTH           0066
         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK                 0066
         MVI   16(R4),X'FF'        MAKE ENDING UCB                      0067
         MVC   17(L'TEMPUCB+L'SCANWORK-1,R4),16(R4)                     0068
*                                                                       0076
DONE     EQU   *                                                        0076
         XR    R15,R15             MAKE ZERO RETURN CODE                0076
*                                                                       0076
BADOUT   EQU   *                                                        0077
         L     R13,SAVE+4          GET CALLER'S SAVE AREA POINTER       0077
         ST    R15,16(,R3)         SET RETURN CODE                      0077
         LM    R14,R12,12(R13)     GET CALLER'S REGISTERS               0078
         XR    R15,R15             SET UP ZERO RETURN CODE              0079
         BR    R14                 RETURN TO CALLER                     0080
*                                                                       0080
         DS    0D                                                       0080
SAVE     DS    9D                  REGISTER STORAGE                     0082
TEMPWORK DS    1D                                                       0083
*                                  EXECUTED INSTRUCTIONS                0085
CLC1     CLC   0(*-*,R5),ZEROES                                         0085
MVC1     MVC   BADMESS3(*-*),0(R4)                                      0085
*                                                                       0085
ZEROES   DC    CL5'0000'                                                0085
*                                                                       0085
         DS    0F                                                       0085
TYPES    EQU   *                   TYPES OF UCBS IT IS POSSIBLE TO      0085
         DC    CL4'ALL ',X'00'     SEARCH FOR WITH THIS SUBROUTINE      0085
         DC    CL4'TAPE',X'80'                                          0085
         DC    CL4'COMM',X'40'                                          0085
         DC    CL4'DASD',X'20'                                          0085
         DC    CL4'DISP',X'10'                                          0085
         DC    CL4'UREC',X'08'                                          0085
         DC    CL4'CHAR',X'04'                                          0085
         DC    CL4'CTC ',X'41'                                          0085
NTYPES   DC    AL2((*-TYPES)/5)    NUMBER OF 5 BYTE ENTRIES IN TABLE    0085
*                                                                       0085
         DC    X'FFFE'             ERROR INDICATOR                      0085
BADMESS1 DC    C'XXXX FIRST ARGUMENT MAY NOT EXCEED 5 CHARS IN LENGTH'  0085
         DS    0F                                                       0085
LBADMS1  DC    AL4(L'BADMESS1+2)                                        0085
*                                                                       0085
         DC    X'FFFE'             ERROR INDICATOR                      0085
BADMESS2 DC    C'XXXX THAT DEVICE TYPE IS NOT DEFINED.'                 0085
         DS    0F                                                       0085
LBADMS2  DC    AL4(L'BADMESS2+2)                                        0085
*                                                                       0085
         DC    X'FFFE'             ERROR INDICATOR                      0085
BADMESS3 DC    C'???? - A DEVICE TYPE MUST BE 4 CHARACTERS IN LENGTH.'  0085
         DS    0F                                                       0085
LBADMS3  DC    AL4(L'BADMESS3+2)                                        0085
*                                                                       0086
TRTAB    DC    C'0123456789ABCDEF'                                      0086
*                                                                       0087
         DS    0F                                                       0109
TEMPUCB  DS    CL48                AREA FOR UCB STORAGE                 0111
SCANWORK DS    CL100               UCBSCAN WORK AREA                    0111
DEVNUM   DS    1F                  AREA FOR DEVICE NUMBER               0111
         DS    0F                                                       0111
UCBLEN   DC    AL4(L'TEMPUCB+L'SCANWORK+4)                              0111
*                                                                       0113
*        PRINT NOGEN                                                    0114
         DSECT                                                          0115
         IEFUCBOB                      UCB                              0116
         END                                                            0117
